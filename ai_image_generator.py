# -*- coding: utf-8 -*-
"""ai_image_generator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11_WnhU6UpntGHFCbiDBdm6w-ru258yCh
"""



!mkdir _ai_image



cd _ai_image

pip install torch torchvision diffusers transformers smplx gradio matplotlib numpy

!pip install virtualenv
!virtualenv ai_project_env
!ai_project_env\Scripts\activate  # For Windows

!conda create -n ai_project_env python=3.9
!conda activate ai_project_env

!pip install pillow

!pip install torch torchvision transformers diffusers smplx gradio matplotlib numpy

pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118  # Adjust CUDA version

pip install smplx torch trimesh pyrender matplotlib numpy

import numpy as np
import torch
import smplx
import matplotlib.pyplot as plt

def generate_body_pose(pose_angle):
    # Load the SMPL model (use a pre-trained SMPL model for human pose)
    model = smplx.create(model_path='/content/_ai_image_generator/smpl_models', model_type='smpl', gender='female', ext='npz')

    # Set the pose parameters (rotation for the whole body)
    body_pose = torch.zeros([1, 72], dtype=torch.float32)
    body_pose[:, 0] = pose_angle  # Yaw angle

    # Generate a 3D human body mesh with the given pose
    output = model(body_pose=body_pose)

    # Convert the 3D mesh into a 2D image (using matplotlib for simplicity)
    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')
    ax.scatter(output.vertices[0, :, 0].cpu().numpy(), output.vertices[0, :, 1].cpu().numpy(), output.vertices[0, :, 2].cpu().numpy())
    ax.view_init(elev=10., azim=pose_angle)  # Adjust view based on the pose angle

    # Save and return the image of the pose
    pose_img_path = "generated_pose.png"
    plt.savefig(pose_img_path)
    return pose_img_path

from model import load_text_to_image_model
from pose_control import generate_body_pose_with_shape
import torch

pipeline = load_text_to_image_model()

def generate_image_from_prompt(prompt, pose_image=None):
    # Generate image from text prompt
    with torch.no_grad():
        result = pipeline(prompt).images[0]
    result.save("output_image.png")  # Save the generated image
    return result

from model import load_text_to_image_model
from pose_control import generate_body_pose_with_shape
import torch

pipeline = load_text_to_image_model()

def generate_image_from_prompt(prompt, pose_image=None):
    # Generate image from text prompt
    with torch.no_grad():
        result = pipeline(prompt)[0]
    result.save("output_image.png")  # Save the generated image
    return result

from model import load_text_to_image_model
from pose_control import generate_body_pose_with_shape
import torch

pipeline = load_text_to_image_model()

def generate_image_from_prompt(prompt, pose_image=None):
    # Generate image from text prompt
    with torch.no_grad():
        result = pipeline(prompt).images[0]
    result.save("output_image.png")  # Save the generated image
    return result

from model import load_text_to_image_model
from pose_control import generate_body_pose_with_shape
import torch

pipeline = load_text_to_image_model()

def generate_image_from_prompt(prompt, pose_image=None):
    # Generate image from text prompt
    with torch.no_grad():
        result = pipeline(prompt)[0]
    result.save("output_image.png")  # Save the generated image
    return result



import gradio as gr
from generator import generate_image_from_prompt

def generate_image(prompt, pose_angle):
    # Generate the pose (dummy or real depending on your `pose_control.py` setup)
    pose_image = None
    output_image = generate_image_from_prompt(prompt, pose_image)
    return output_image

interface = gr.Interface(
    fn=generate_image,
    inputs=["text", gr.Slider(0, 360)],  # Text input and pose angle slider
    outputs="image"  # The generated image
)

interface.launch()

import torch
print("GPU available:", torch.cuda.is_available())



import gradio as gr
from generatorrr import generate_image

# Add Textbox for natural language prompt
prompt_input = gr.Textbox(
    placeholder="Enter prompt (e.g. 'arms raised', 'slightly bent knees')",
    label="Text Prompt"
)

# Create Gradio interface
gr.Interface(
    fn=generate_image,
    inputs=[prompt_input],
    outputs=gr.Image(type="filepath"),  # Output as filepath
    live=True,
).launch()